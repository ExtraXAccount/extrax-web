/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  WalletBalanceProvider,
  WalletBalanceProviderInterface,
} from "../../../periphery-v3/misc/WalletBalanceProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "batchBalanceOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserWalletBalances",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c5d806100206000396000f3fe6080604052600436106100385760003560e01c806302405343146100b1578063b59b28ef146100e8578063f7888aec1461011557600080fd5b366100ac57333b6100aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f323200000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b005b600080fd5b3480156100bd57600080fd5b506100d16100cc36600461082c565b610143565b6040516100df9291906108a1565b60405180910390f35b3480156100f457600080fd5b50610108610103366004610954565b610589565b6040516100df91906109c0565b34801561012157600080fd5b5061013561013036600461082c565b61068e565b6040519081526020016100df565b60608060008473ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b791906109da565b905060008173ffffffffffffffffffffffffffffffffffffffff1663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610206573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261024c9190810190610a75565b905060008151600161025e9190610b56565b67ffffffffffffffff811115610276576102766109f7565b60405190808252806020026020018201604052801561029f578160200160208202803683370190505b50905060005b8251811015610307578281815181106102c0576102c0610b69565b60200260200101518282815181106102da576102da610b69565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016102a5565b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8183518151811061033057610330610b69565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000815167ffffffffffffffff811115610386576103866109f7565b6040519080825280602002602001820160405280156103af578160200160208202803683370190505b50905060005b835181101561053d5760008573ffffffffffffffffffffffffffffffffffffffff1663c44b11f78584815181106103ee576103ee610b69565b60200260200101516040518263ffffffff1660e01b815260040161042e919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190610b98565b905060006104bf8251670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b505050509050806104f15760008484815181106104de576104de610b69565b6020026020010181815250505050610535565b6105148a86858151811061050757610507610b69565b602002602001015161068e565b84848151811061052657610526610b69565b60200260200101818152505050505b6001016103b5565b5061055c8773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61068e565b8184518151811061056f5761056f610b69565b6020908102919091010152909450925050505b9250929050565b606060006105978386610bda565b67ffffffffffffffff8111156105af576105af6109f7565b6040519080825280602002602001820160405280156105d8578160200160208202803683370190505b50905060005b858110156106845760005b8481101561067b5761064288888481811061060657610606610b69565b905060200201602081019061061b9190610bf1565b87878481811061062d5761062d610b69565b90506020020160208101906101309190610bf1565b838261064e8886610bda565b6106589190610b56565b8151811061066857610668610b69565b60209081029190910101526001016105e9565b506001016105de565b5095945050505050565b60007fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8316016106eb575073ffffffffffffffffffffffffffffffffffffffff821631610801565b73ffffffffffffffffffffffffffffffffffffffff82163b1561079f576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528316906370a0823190602401602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190610c0e565b9050610801565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f494e56414c49445f544f4b454e0000000000000000000000000000000000000060448201526064016100a1565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461082957600080fd5b50565b6000806040838503121561083f57600080fd5b823561084a81610807565b9150602083013561085a81610807565b809150509250929050565b60008151808452602080850194506020840160005b838110156108965781518752958201959082019060010161087a565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156108f057815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016108be565b50505083810360208501526109058186610865565b9695505050505050565b60008083601f84011261092157600080fd5b50813567ffffffffffffffff81111561093957600080fd5b6020830191508360208260051b850101111561058257600080fd5b6000806000806040858703121561096a57600080fd5b843567ffffffffffffffff8082111561098257600080fd5b61098e8883890161090f565b909650945060208701359150808211156109a757600080fd5b506109b48782880161090f565b95989497509550505050565b6020815260006109d36020830184610865565b9392505050565b6000602082840312156109ec57600080fd5b81516109d381610807565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610a6d57610a6d6109f7565b604052919050565b60006020808385031215610a8857600080fd5b825167ffffffffffffffff80821115610aa057600080fd5b818501915085601f830112610ab457600080fd5b815181811115610ac657610ac66109f7565b8060051b9150610ad7848301610a26565b8181529183018401918481019088841115610af157600080fd5b938501935b83851015610b1b5784519250610b0b83610807565b8282529385019390850190610af6565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561080157610801610b27565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610baa57600080fd5b6040516020810181811067ffffffffffffffff82111715610bcd57610bcd6109f7565b6040529151825250919050565b808202811582820484141761080157610801610b27565b600060208284031215610c0357600080fd5b81356109d381610807565b600060208284031215610c2057600080fd5b505191905056fea2646970667358221220491243c2da62c8f226fe4fb0bc27b7217aa33cd1c2da7d856b86ba54f4e5f5cb64736f6c63430008180033";

type WalletBalanceProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WalletBalanceProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WalletBalanceProvider__factory extends ContractFactory {
  constructor(...args: WalletBalanceProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      WalletBalanceProvider & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): WalletBalanceProvider__factory {
    return super.connect(runner) as WalletBalanceProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WalletBalanceProviderInterface {
    return new Interface(_abi) as WalletBalanceProviderInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WalletBalanceProvider {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as WalletBalanceProvider;
  }
}
