/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGnosisSafeProxyFactory,
  IGnosisSafeProxyFactoryInterface,
} from "../../../extra-x-account/ExtraXAccountFactory.sol/IGnosisSafeProxyFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_singleton",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "initializer",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "saltNonce",
        type: "uint256",
      },
    ],
    name: "createProxyWithNonce",
    outputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IGnosisSafeProxyFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IGnosisSafeProxyFactoryInterface {
    return new Interface(_abi) as IGnosisSafeProxyFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGnosisSafeProxyFactory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IGnosisSafeProxyFactory;
  }
}
