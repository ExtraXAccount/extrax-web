/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ExtraXAccountFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACCOUNT_NONCE"
      | "ACCOUNT_SETUP_METHOD_SELECTOR"
      | "EXTRA_X_ACCOUNT_SEED"
      | "MAX_ACCOUNTS_PER_USER"
      | "SAFE_PROXY_FACTORY_L2"
      | "SAFE_SINGLETON_L2"
      | "accountsOfOwner"
      | "createAccount"
      | "createAccountFor"
      | "getAccountsOfOwner"
      | "nextAccountId"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "ACCOUNT_NONCE",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ACCOUNT_SETUP_METHOD_SELECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXTRA_X_ACCOUNT_SEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ACCOUNTS_PER_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAFE_PROXY_FACTORY_L2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SAFE_SINGLETON_L2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountsOfOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAccountFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountsOfOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAccountId",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCOUNT_NONCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCOUNT_SETUP_METHOD_SELECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXTRA_X_ACCOUNT_SEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ACCOUNTS_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAFE_PROXY_FACTORY_L2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SAFE_SINGLETON_L2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccountFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountsOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAccountId",
    data: BytesLike
  ): Result;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    account: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [owner: string, account: string, id: bigint];
  export interface OutputObject {
    owner: string;
    account: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExtraXAccountFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ExtraXAccountFactory;
  waitForDeployment(): Promise<this>;

  interface: ExtraXAccountFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACCOUNT_NONCE: TypedContractMethod<
    [owner: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  ACCOUNT_SETUP_METHOD_SELECTOR: TypedContractMethod<[], [string], "view">;

  EXTRA_X_ACCOUNT_SEED: TypedContractMethod<[], [string], "view">;

  MAX_ACCOUNTS_PER_USER: TypedContractMethod<[], [bigint], "view">;

  SAFE_PROXY_FACTORY_L2: TypedContractMethod<[], [string], "view">;

  SAFE_SINGLETON_L2: TypedContractMethod<[], [string], "view">;

  accountsOfOwner: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  createAccount: TypedContractMethod<[], [string], "nonpayable">;

  createAccountFor: TypedContractMethod<
    [owner: AddressLike],
    [string],
    "nonpayable"
  >;

  getAccountsOfOwner: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  nextAccountId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACCOUNT_NONCE"
  ): TypedContractMethod<
    [owner: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ACCOUNT_SETUP_METHOD_SELECTOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXTRA_X_ACCOUNT_SEED"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_ACCOUNTS_PER_USER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SAFE_PROXY_FACTORY_L2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SAFE_SINGLETON_L2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accountsOfOwner"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAccount"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createAccountFor"
  ): TypedContractMethod<[owner: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getAccountsOfOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "nextAccountId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "AccountCreated"
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;

  filters: {
    "AccountCreated(address,address,uint256)": TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
  };
}
