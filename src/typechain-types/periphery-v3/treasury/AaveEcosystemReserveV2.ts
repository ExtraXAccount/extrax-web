/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AaveEcosystemReserveV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "ETH_MOCK_ADDRESS"
      | "REVISION"
      | "approve"
      | "balanceOf"
      | "cancelStream"
      | "createStream"
      | "deltaOf"
      | "getFundsAdmin"
      | "getNextStreamId"
      | "getStream"
      | "initialize"
      | "transfer"
      | "withdrawFromStream"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelStream"
      | "CreateStream"
      | "NewFundsAdmin"
      | "WithdrawFromStream"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ETH_MOCK_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStream",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deltaOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundsAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextStreamId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStream",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETH_MOCK_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deltaOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFundsAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextStreamId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStream", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStream",
    data: BytesLike
  ): Result;
}

export namespace CancelStreamEvent {
  export type InputTuple = [
    streamId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    senderBalance: BigNumberish,
    recipientBalance: BigNumberish
  ];
  export type OutputTuple = [
    streamId: bigint,
    sender: string,
    recipient: string,
    senderBalance: bigint,
    recipientBalance: bigint
  ];
  export interface OutputObject {
    streamId: bigint;
    sender: string;
    recipient: string;
    senderBalance: bigint;
    recipientBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateStreamEvent {
  export type InputTuple = [
    streamId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    deposit: BigNumberish,
    tokenAddress: AddressLike,
    startTime: BigNumberish,
    stopTime: BigNumberish
  ];
  export type OutputTuple = [
    streamId: bigint,
    sender: string,
    recipient: string,
    deposit: bigint,
    tokenAddress: string,
    startTime: bigint,
    stopTime: bigint
  ];
  export interface OutputObject {
    streamId: bigint;
    sender: string;
    recipient: string;
    deposit: bigint;
    tokenAddress: string;
    startTime: bigint;
    stopTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewFundsAdminEvent {
  export type InputTuple = [fundsAdmin: AddressLike];
  export type OutputTuple = [fundsAdmin: string];
  export interface OutputObject {
    fundsAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawFromStreamEvent {
  export type InputTuple = [
    streamId: BigNumberish,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    streamId: bigint,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    streamId: bigint;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AaveEcosystemReserveV2 extends BaseContract {
  connect(runner?: ContractRunner | null): AaveEcosystemReserveV2;
  waitForDeployment(): Promise<this>;

  interface: AaveEcosystemReserveV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ETH_MOCK_ADDRESS: TypedContractMethod<[], [string], "view">;

  REVISION: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<
    [streamId: BigNumberish, who: AddressLike],
    [bigint],
    "view"
  >;

  cancelStream: TypedContractMethod<
    [streamId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  createStream: TypedContractMethod<
    [
      recipient: AddressLike,
      deposit: BigNumberish,
      tokenAddress: AddressLike,
      startTime: BigNumberish,
      stopTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  deltaOf: TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;

  getFundsAdmin: TypedContractMethod<[], [string], "view">;

  getNextStreamId: TypedContractMethod<[], [bigint], "view">;

  getStream: TypedContractMethod<
    [streamId: BigNumberish],
    [
      [string, string, bigint, string, bigint, bigint, bigint, bigint] & {
        sender: string;
        recipient: string;
        deposit: bigint;
        tokenAddress: string;
        startTime: bigint;
        stopTime: bigint;
        remainingBalance: bigint;
        ratePerSecond: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<
    [fundsAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawFromStream: TypedContractMethod<
    [streamId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ETH_MOCK_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REVISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [streamId: BigNumberish, who: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelStream"
  ): TypedContractMethod<[streamId: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "createStream"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      deposit: BigNumberish,
      tokenAddress: AddressLike,
      startTime: BigNumberish,
      stopTime: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deltaOf"
  ): TypedContractMethod<[streamId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFundsAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNextStreamId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStream"
  ): TypedContractMethod<
    [streamId: BigNumberish],
    [
      [string, string, bigint, string, bigint, bigint, bigint, bigint] & {
        sender: string;
        recipient: string;
        deposit: bigint;
        tokenAddress: string;
        startTime: bigint;
        stopTime: bigint;
        remainingBalance: bigint;
        ratePerSecond: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[fundsAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [token: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFromStream"
  ): TypedContractMethod<
    [streamId: BigNumberish, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "CancelStream"
  ): TypedContractEvent<
    CancelStreamEvent.InputTuple,
    CancelStreamEvent.OutputTuple,
    CancelStreamEvent.OutputObject
  >;
  getEvent(
    key: "CreateStream"
  ): TypedContractEvent<
    CreateStreamEvent.InputTuple,
    CreateStreamEvent.OutputTuple,
    CreateStreamEvent.OutputObject
  >;
  getEvent(
    key: "NewFundsAdmin"
  ): TypedContractEvent<
    NewFundsAdminEvent.InputTuple,
    NewFundsAdminEvent.OutputTuple,
    NewFundsAdminEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawFromStream"
  ): TypedContractEvent<
    WithdrawFromStreamEvent.InputTuple,
    WithdrawFromStreamEvent.OutputTuple,
    WithdrawFromStreamEvent.OutputObject
  >;

  filters: {
    "CancelStream(uint256,address,address,uint256,uint256)": TypedContractEvent<
      CancelStreamEvent.InputTuple,
      CancelStreamEvent.OutputTuple,
      CancelStreamEvent.OutputObject
    >;
    CancelStream: TypedContractEvent<
      CancelStreamEvent.InputTuple,
      CancelStreamEvent.OutputTuple,
      CancelStreamEvent.OutputObject
    >;

    "CreateStream(uint256,address,address,uint256,address,uint256,uint256)": TypedContractEvent<
      CreateStreamEvent.InputTuple,
      CreateStreamEvent.OutputTuple,
      CreateStreamEvent.OutputObject
    >;
    CreateStream: TypedContractEvent<
      CreateStreamEvent.InputTuple,
      CreateStreamEvent.OutputTuple,
      CreateStreamEvent.OutputObject
    >;

    "NewFundsAdmin(address)": TypedContractEvent<
      NewFundsAdminEvent.InputTuple,
      NewFundsAdminEvent.OutputTuple,
      NewFundsAdminEvent.OutputObject
    >;
    NewFundsAdmin: TypedContractEvent<
      NewFundsAdminEvent.InputTuple,
      NewFundsAdminEvent.OutputTuple,
      NewFundsAdminEvent.OutputObject
    >;

    "WithdrawFromStream(uint256,address,uint256)": TypedContractEvent<
      WithdrawFromStreamEvent.InputTuple,
      WithdrawFromStreamEvent.OutputTuple,
      WithdrawFromStreamEvent.OutputObject
    >;
    WithdrawFromStream: TypedContractEvent<
      WithdrawFromStreamEvent.InputTuple,
      WithdrawFromStreamEvent.OutputTuple,
      WithdrawFromStreamEvent.OutputObject
    >;
  };
}
