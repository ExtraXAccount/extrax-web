/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace RewardsDataTypes {
  export type RewardsConfigInputStruct = {
    emissionPerSecond: BigNumberish;
    totalSupply: BigNumberish;
    distributionEnd: BigNumberish;
    asset: AddressLike;
    reward: AddressLike;
    transferStrategy: AddressLike;
    rewardOracle: AddressLike;
  };

  export type RewardsConfigInputStructOutput = [
    emissionPerSecond: bigint,
    totalSupply: bigint,
    distributionEnd: bigint,
    asset: string,
    reward: string,
    transferStrategy: string,
    rewardOracle: string
  ] & {
    emissionPerSecond: bigint;
    totalSupply: bigint;
    distributionEnd: bigint;
    asset: string;
    reward: string;
    transferStrategy: string;
    rewardOracle: string;
  };
}

export interface EmissionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "configureAssets"
      | "getEmissionAdmin"
      | "getRewardsController"
      | "owner"
      | "renounceOwnership"
      | "setClaimer"
      | "setDistributionEnd"
      | "setEmissionAdmin"
      | "setEmissionPerSecond"
      | "setRewardOracle"
      | "setRewardsController"
      | "setTransferStrategy"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EmissionAdminUpdated" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "configureAssets",
    values: [RewardsDataTypes.RewardsConfigInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmissionAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionEnd",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionAdmin",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmissionPerSecond",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardOracle",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTransferStrategy",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmissionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setClaimer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmissionPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransferStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace EmissionAdminUpdatedEvent {
  export type InputTuple = [
    reward: AddressLike,
    oldAdmin: AddressLike,
    newAdmin: AddressLike
  ];
  export type OutputTuple = [
    reward: string,
    oldAdmin: string,
    newAdmin: string
  ];
  export interface OutputObject {
    reward: string;
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmissionManager extends BaseContract {
  connect(runner?: ContractRunner | null): EmissionManager;
  waitForDeployment(): Promise<this>;

  interface: EmissionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  configureAssets: TypedContractMethod<
    [config: RewardsDataTypes.RewardsConfigInputStruct[]],
    [void],
    "nonpayable"
  >;

  getEmissionAdmin: TypedContractMethod<
    [reward: AddressLike],
    [string],
    "view"
  >;

  getRewardsController: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setClaimer: TypedContractMethod<
    [user: AddressLike, claimer: AddressLike],
    [void],
    "nonpayable"
  >;

  setDistributionEnd: TypedContractMethod<
    [asset: AddressLike, reward: AddressLike, newDistributionEnd: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEmissionAdmin: TypedContractMethod<
    [reward: AddressLike, admin: AddressLike],
    [void],
    "nonpayable"
  >;

  setEmissionPerSecond: TypedContractMethod<
    [
      asset: AddressLike,
      rewards: AddressLike[],
      newEmissionsPerSecond: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setRewardOracle: TypedContractMethod<
    [reward: AddressLike, rewardOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardsController: TypedContractMethod<
    [controller: AddressLike],
    [void],
    "nonpayable"
  >;

  setTransferStrategy: TypedContractMethod<
    [reward: AddressLike, transferStrategy: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "configureAssets"
  ): TypedContractMethod<
    [config: RewardsDataTypes.RewardsConfigInputStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEmissionAdmin"
  ): TypedContractMethod<[reward: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRewardsController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setClaimer"
  ): TypedContractMethod<
    [user: AddressLike, claimer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDistributionEnd"
  ): TypedContractMethod<
    [asset: AddressLike, reward: AddressLike, newDistributionEnd: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmissionAdmin"
  ): TypedContractMethod<
    [reward: AddressLike, admin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmissionPerSecond"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      rewards: AddressLike[],
      newEmissionsPerSecond: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardOracle"
  ): TypedContractMethod<
    [reward: AddressLike, rewardOracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardsController"
  ): TypedContractMethod<[controller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferStrategy"
  ): TypedContractMethod<
    [reward: AddressLike, transferStrategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EmissionAdminUpdated"
  ): TypedContractEvent<
    EmissionAdminUpdatedEvent.InputTuple,
    EmissionAdminUpdatedEvent.OutputTuple,
    EmissionAdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "EmissionAdminUpdated(address,address,address)": TypedContractEvent<
      EmissionAdminUpdatedEvent.InputTuple,
      EmissionAdminUpdatedEvent.OutputTuple,
      EmissionAdminUpdatedEvent.OutputObject
    >;
    EmissionAdminUpdated: TypedContractEvent<
      EmissionAdminUpdatedEvent.InputTuple,
      EmissionAdminUpdatedEvent.OutputTuple,
      EmissionAdminUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
