/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockParaSwapAugustusInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buy"
      | "expectBuy"
      | "expectSwap"
      | "getTokenTransferProxy"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expectBuy",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expectSwap",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTransferProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expectBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expectSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTransferProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export interface MockParaSwapAugustus extends BaseContract {
  connect(runner?: ContractRunner | null): MockParaSwapAugustus;
  waitForDeployment(): Promise<this>;

  interface: MockParaSwapAugustusInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buy: TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmount: BigNumberish,
      toAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  expectBuy: TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmount: BigNumberish,
      toAmountMin: BigNumberish,
      toAmountMax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  expectSwap: TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmountMin: BigNumberish,
      fromAmountMax: BigNumberish,
      receivedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getTokenTransferProxy: TypedContractMethod<[], [string], "view">;

  swap: TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmount: BigNumberish,
      toAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmount: BigNumberish,
      toAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectBuy"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmount: BigNumberish,
      toAmountMin: BigNumberish,
      toAmountMax: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectSwap"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmountMin: BigNumberish,
      fromAmountMax: BigNumberish,
      receivedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenTransferProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      fromToken: AddressLike,
      toToken: AddressLike,
      fromAmount: BigNumberish,
      toAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
