/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFaucetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMaximumMintAmount"
      | "isMintable"
      | "isPermissioned"
      | "mint"
      | "setMaximumMintAmount"
      | "setMintable"
      | "setPermissioned"
      | "setProtectedOfChild"
      | "transferOwnershipOfChild"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMaximumMintAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMintable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissioned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaximumMintAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintable",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissioned",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedOfChild",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnershipOfChild",
    values: [AddressLike[], AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMaximumMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMintable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPermissioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaximumMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedOfChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnershipOfChild",
    data: BytesLike
  ): Result;
}

export interface IFaucet extends BaseContract {
  connect(runner?: ContractRunner | null): IFaucet;
  waitForDeployment(): Promise<this>;

  interface: IFaucetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMaximumMintAmount: TypedContractMethod<[], [bigint], "view">;

  isMintable: TypedContractMethod<[asset: AddressLike], [boolean], "view">;

  isPermissioned: TypedContractMethod<[], [boolean], "view">;

  mint: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setMaximumMintAmount: TypedContractMethod<
    [newMaxMintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMintable: TypedContractMethod<
    [asset: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;

  setPermissioned: TypedContractMethod<[value: boolean], [void], "nonpayable">;

  setProtectedOfChild: TypedContractMethod<
    [childContracts: AddressLike[], state: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnershipOfChild: TypedContractMethod<
    [childContracts: AddressLike[], newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMaximumMintAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isMintable"
  ): TypedContractMethod<[asset: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPermissioned"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaximumMintAmount"
  ): TypedContractMethod<
    [newMaxMintAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintable"
  ): TypedContractMethod<
    [asset: AddressLike, active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermissioned"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtectedOfChild"
  ): TypedContractMethod<
    [childContracts: AddressLike[], state: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnershipOfChild"
  ): TypedContractMethod<
    [childContracts: AddressLike[], newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
