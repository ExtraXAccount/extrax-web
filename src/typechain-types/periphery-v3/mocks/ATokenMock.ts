/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ATokenMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_aic"
      | "cleanUserState"
      | "decimals"
      | "doubleHandleActionOnAic"
      | "getScaledUserBalanceAndSupply"
      | "handleActionOnAic"
      | "scaledTotalSupply"
      | "setUserBalanceAndSupply"
      | "totalSupply"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Accrued" | "AssetConfigUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "_aic", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cleanUserState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doubleHandleActionOnAic",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScaledUserBalanceAndSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleActionOnAic",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserBalanceAndSupply",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_aic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doubleHandleActionOnAic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScaledUserBalanceAndSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleActionOnAic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserBalanceAndSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
}

export namespace AccruedEvent {
  export type InputTuple = [
    asset: AddressLike,
    user: AddressLike,
    assetIndex: BigNumberish,
    userIndex: BigNumberish,
    rewardsAccrued: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    user: string,
    assetIndex: bigint,
    userIndex: bigint,
    rewardsAccrued: bigint
  ];
  export interface OutputObject {
    asset: string;
    user: string;
    assetIndex: bigint;
    userIndex: bigint;
    rewardsAccrued: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetConfigUpdatedEvent {
  export type InputTuple = [
    asset: AddressLike,
    reward: AddressLike,
    emission: BigNumberish,
    distributionEnd: BigNumberish,
    assetIndex: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    reward: string,
    emission: bigint,
    distributionEnd: bigint,
    assetIndex: bigint
  ];
  export interface OutputObject {
    asset: string;
    reward: string;
    emission: bigint;
    distributionEnd: bigint;
    assetIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ATokenMock extends BaseContract {
  connect(runner?: ContractRunner | null): ATokenMock;
  waitForDeployment(): Promise<this>;

  interface: ATokenMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _aic: TypedContractMethod<[], [string], "view">;

  cleanUserState: TypedContractMethod<[], [void], "nonpayable">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  doubleHandleActionOnAic: TypedContractMethod<
    [user: AddressLike, totalSupply: BigNumberish, userBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  getScaledUserBalanceAndSupply: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  handleActionOnAic: TypedContractMethod<
    [user: AddressLike, totalSupply: BigNumberish, userBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  scaledTotalSupply: TypedContractMethod<[], [bigint], "view">;

  setUserBalanceAndSupply: TypedContractMethod<
    [userBalance: BigNumberish, totalSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_aic"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cleanUserState"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "doubleHandleActionOnAic"
  ): TypedContractMethod<
    [user: AddressLike, totalSupply: BigNumberish, userBalance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getScaledUserBalanceAndSupply"
  ): TypedContractMethod<[arg0: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "handleActionOnAic"
  ): TypedContractMethod<
    [user: AddressLike, totalSupply: BigNumberish, userBalance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scaledTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setUserBalanceAndSupply"
  ): TypedContractMethod<
    [userBalance: BigNumberish, totalSupply: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Accrued"
  ): TypedContractEvent<
    AccruedEvent.InputTuple,
    AccruedEvent.OutputTuple,
    AccruedEvent.OutputObject
  >;
  getEvent(
    key: "AssetConfigUpdated"
  ): TypedContractEvent<
    AssetConfigUpdatedEvent.InputTuple,
    AssetConfigUpdatedEvent.OutputTuple,
    AssetConfigUpdatedEvent.OutputObject
  >;

  filters: {
    "Accrued(address,address,uint256,uint256,uint256)": TypedContractEvent<
      AccruedEvent.InputTuple,
      AccruedEvent.OutputTuple,
      AccruedEvent.OutputObject
    >;
    Accrued: TypedContractEvent<
      AccruedEvent.InputTuple,
      AccruedEvent.OutputTuple,
      AccruedEvent.OutputObject
    >;

    "AssetConfigUpdated(address,address,uint256,uint256,uint256)": TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;
    AssetConfigUpdated: TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;
  };
}
