/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface DebtTokenBaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELEGATION_WITH_SIG_TYPEHASH"
      | "DOMAIN_SEPARATOR"
      | "EIP712_REVISION"
      | "approveDelegation"
      | "borrowAllowance"
      | "delegationWithSig"
      | "nonces"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BorrowAllowanceDelegated"): EventFragment;

  encodeFunctionData(
    functionFragment: "DELEGATION_WITH_SIG_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EIP712_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveDelegation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationWithSig",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_WITH_SIG_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EIP712_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
}

export namespace BorrowAllowanceDelegatedEvent {
  export type InputTuple = [
    fromUser: AddressLike,
    toUser: AddressLike,
    asset: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    fromUser: string,
    toUser: string,
    asset: string,
    amount: bigint
  ];
  export interface OutputObject {
    fromUser: string;
    toUser: string;
    asset: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DebtTokenBase extends BaseContract {
  connect(runner?: ContractRunner | null): DebtTokenBase;
  waitForDeployment(): Promise<this>;

  interface: DebtTokenBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELEGATION_WITH_SIG_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  EIP712_REVISION: TypedContractMethod<[], [string], "view">;

  approveDelegation: TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  borrowAllowance: TypedContractMethod<
    [fromUser: AddressLike, toUser: AddressLike],
    [bigint],
    "view"
  >;

  delegationWithSig: TypedContractMethod<
    [
      delegator: AddressLike,
      delegatee: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELEGATION_WITH_SIG_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EIP712_REVISION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveDelegation"
  ): TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowAllowance"
  ): TypedContractMethod<
    [fromUser: AddressLike, toUser: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegationWithSig"
  ): TypedContractMethod<
    [
      delegator: AddressLike,
      delegatee: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getEvent(
    key: "BorrowAllowanceDelegated"
  ): TypedContractEvent<
    BorrowAllowanceDelegatedEvent.InputTuple,
    BorrowAllowanceDelegatedEvent.OutputTuple,
    BorrowAllowanceDelegatedEvent.OutputObject
  >;

  filters: {
    "BorrowAllowanceDelegated(address,address,address,uint256)": TypedContractEvent<
      BorrowAllowanceDelegatedEvent.InputTuple,
      BorrowAllowanceDelegatedEvent.OutputTuple,
      BorrowAllowanceDelegatedEvent.OutputObject
    >;
    BorrowAllowanceDelegated: TypedContractEvent<
      BorrowAllowanceDelegatedEvent.InputTuple,
      BorrowAllowanceDelegatedEvent.OutputTuple,
      BorrowAllowanceDelegatedEvent.OutputObject
    >;
  };
}
