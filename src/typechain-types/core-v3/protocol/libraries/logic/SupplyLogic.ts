/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../common";

export interface SupplyLogicInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ReserveDataUpdated"
      | "ReserveUsedAsCollateralDisabled"
      | "ReserveUsedAsCollateralEnabled"
      | "Supply"
      | "Withdraw"
  ): EventFragment;
}

export namespace ReserveDataUpdatedEvent {
  export type InputTuple = [
    reserve: AddressLike,
    liquidityRate: BigNumberish,
    stableBorrowRate: BigNumberish,
    variableBorrowRate: BigNumberish,
    liquidityIndex: BigNumberish,
    variableBorrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    liquidityRate: bigint,
    stableBorrowRate: bigint,
    variableBorrowRate: bigint,
    liquidityIndex: bigint,
    variableBorrowIndex: bigint
  ];
  export interface OutputObject {
    reserve: string;
    liquidityRate: bigint;
    stableBorrowRate: bigint;
    variableBorrowRate: bigint;
    liquidityIndex: bigint;
    variableBorrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUsedAsCollateralDisabledEvent {
  export type InputTuple = [reserve: AddressLike, user: AddressLike];
  export type OutputTuple = [reserve: string, user: string];
  export interface OutputObject {
    reserve: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUsedAsCollateralEnabledEvent {
  export type InputTuple = [reserve: AddressLike, user: AddressLike];
  export type OutputTuple = [reserve: string, user: string];
  export interface OutputObject {
    reserve: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [
    reserve: AddressLike,
    user: AddressLike,
    onBehalfOf: AddressLike,
    amount: BigNumberish,
    referralCode: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    user: string,
    onBehalfOf: string,
    amount: bigint,
    referralCode: bigint
  ];
  export interface OutputObject {
    reserve: string;
    user: string;
    onBehalfOf: string;
    amount: bigint;
    referralCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    reserve: AddressLike,
    user: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    user: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    reserve: string;
    user: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SupplyLogic extends BaseContract {
  connect(runner?: ContractRunner | null): SupplyLogic;
  waitForDeployment(): Promise<this>;

  interface: SupplyLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ReserveDataUpdated"
  ): TypedContractEvent<
    ReserveDataUpdatedEvent.InputTuple,
    ReserveDataUpdatedEvent.OutputTuple,
    ReserveDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralDisabled"
  ): TypedContractEvent<
    ReserveUsedAsCollateralDisabledEvent.InputTuple,
    ReserveUsedAsCollateralDisabledEvent.OutputTuple,
    ReserveUsedAsCollateralDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralEnabled"
  ): TypedContractEvent<
    ReserveUsedAsCollateralEnabledEvent.InputTuple,
    ReserveUsedAsCollateralEnabledEvent.OutputTuple,
    ReserveUsedAsCollateralEnabledEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReserveDataUpdatedEvent.InputTuple,
      ReserveDataUpdatedEvent.OutputTuple,
      ReserveDataUpdatedEvent.OutputObject
    >;
    ReserveDataUpdated: TypedContractEvent<
      ReserveDataUpdatedEvent.InputTuple,
      ReserveDataUpdatedEvent.OutputTuple,
      ReserveDataUpdatedEvent.OutputObject
    >;

    "ReserveUsedAsCollateralDisabled(address,address)": TypedContractEvent<
      ReserveUsedAsCollateralDisabledEvent.InputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputObject
    >;
    ReserveUsedAsCollateralDisabled: TypedContractEvent<
      ReserveUsedAsCollateralDisabledEvent.InputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputObject
    >;

    "ReserveUsedAsCollateralEnabled(address,address)": TypedContractEvent<
      ReserveUsedAsCollateralEnabledEvent.InputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputObject
    >;
    ReserveUsedAsCollateralEnabled: TypedContractEvent<
      ReserveUsedAsCollateralEnabledEvent.InputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputObject
    >;

    "Supply(address,address,address,uint256,uint16)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
