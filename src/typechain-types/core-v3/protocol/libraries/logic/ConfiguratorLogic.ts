/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../common";

export interface ConfiguratorLogicInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ATokenUpgraded"
      | "ReserveInitialized"
      | "StableDebtTokenUpgraded"
      | "VariableDebtTokenUpgraded"
  ): EventFragment;
}

export namespace ATokenUpgradedEvent {
  export type InputTuple = [
    asset: AddressLike,
    proxy: AddressLike,
    implementation: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    proxy: string,
    implementation: string
  ];
  export interface OutputObject {
    asset: string;
    proxy: string;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveInitializedEvent {
  export type InputTuple = [
    asset: AddressLike,
    aToken: AddressLike,
    stableDebtToken: AddressLike,
    variableDebtToken: AddressLike,
    interestRateStrategyAddress: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    aToken: string,
    stableDebtToken: string,
    variableDebtToken: string,
    interestRateStrategyAddress: string
  ];
  export interface OutputObject {
    asset: string;
    aToken: string;
    stableDebtToken: string;
    variableDebtToken: string;
    interestRateStrategyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StableDebtTokenUpgradedEvent {
  export type InputTuple = [
    asset: AddressLike,
    proxy: AddressLike,
    implementation: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    proxy: string,
    implementation: string
  ];
  export interface OutputObject {
    asset: string;
    proxy: string;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VariableDebtTokenUpgradedEvent {
  export type InputTuple = [
    asset: AddressLike,
    proxy: AddressLike,
    implementation: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    proxy: string,
    implementation: string
  ];
  export interface OutputObject {
    asset: string;
    proxy: string;
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfiguratorLogic extends BaseContract {
  connect(runner?: ContractRunner | null): ConfiguratorLogic;
  waitForDeployment(): Promise<this>;

  interface: ConfiguratorLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ATokenUpgraded"
  ): TypedContractEvent<
    ATokenUpgradedEvent.InputTuple,
    ATokenUpgradedEvent.OutputTuple,
    ATokenUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveInitialized"
  ): TypedContractEvent<
    ReserveInitializedEvent.InputTuple,
    ReserveInitializedEvent.OutputTuple,
    ReserveInitializedEvent.OutputObject
  >;
  getEvent(
    key: "StableDebtTokenUpgraded"
  ): TypedContractEvent<
    StableDebtTokenUpgradedEvent.InputTuple,
    StableDebtTokenUpgradedEvent.OutputTuple,
    StableDebtTokenUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "VariableDebtTokenUpgraded"
  ): TypedContractEvent<
    VariableDebtTokenUpgradedEvent.InputTuple,
    VariableDebtTokenUpgradedEvent.OutputTuple,
    VariableDebtTokenUpgradedEvent.OutputObject
  >;

  filters: {
    "ATokenUpgraded(address,address,address)": TypedContractEvent<
      ATokenUpgradedEvent.InputTuple,
      ATokenUpgradedEvent.OutputTuple,
      ATokenUpgradedEvent.OutputObject
    >;
    ATokenUpgraded: TypedContractEvent<
      ATokenUpgradedEvent.InputTuple,
      ATokenUpgradedEvent.OutputTuple,
      ATokenUpgradedEvent.OutputObject
    >;

    "ReserveInitialized(address,address,address,address,address)": TypedContractEvent<
      ReserveInitializedEvent.InputTuple,
      ReserveInitializedEvent.OutputTuple,
      ReserveInitializedEvent.OutputObject
    >;
    ReserveInitialized: TypedContractEvent<
      ReserveInitializedEvent.InputTuple,
      ReserveInitializedEvent.OutputTuple,
      ReserveInitializedEvent.OutputObject
    >;

    "StableDebtTokenUpgraded(address,address,address)": TypedContractEvent<
      StableDebtTokenUpgradedEvent.InputTuple,
      StableDebtTokenUpgradedEvent.OutputTuple,
      StableDebtTokenUpgradedEvent.OutputObject
    >;
    StableDebtTokenUpgraded: TypedContractEvent<
      StableDebtTokenUpgradedEvent.InputTuple,
      StableDebtTokenUpgradedEvent.OutputTuple,
      StableDebtTokenUpgradedEvent.OutputObject
    >;

    "VariableDebtTokenUpgraded(address,address,address)": TypedContractEvent<
      VariableDebtTokenUpgradedEvent.InputTuple,
      VariableDebtTokenUpgradedEvent.OutputTuple,
      VariableDebtTokenUpgradedEvent.OutputObject
    >;
    VariableDebtTokenUpgraded: TypedContractEvent<
      VariableDebtTokenUpgradedEvent.InputTuple,
      VariableDebtTokenUpgradedEvent.OutputTuple,
      VariableDebtTokenUpgradedEvent.OutputObject
    >;
  };
}
