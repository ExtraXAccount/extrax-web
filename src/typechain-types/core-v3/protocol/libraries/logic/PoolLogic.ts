/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../common";

export interface PoolLogicInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "IsolationModeTotalDebtUpdated" | "MintedToTreasury"
  ): EventFragment;
}

export namespace IsolationModeTotalDebtUpdatedEvent {
  export type InputTuple = [asset: AddressLike, totalDebt: BigNumberish];
  export type OutputTuple = [asset: string, totalDebt: bigint];
  export interface OutputObject {
    asset: string;
    totalDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedToTreasuryEvent {
  export type InputTuple = [reserve: AddressLike, amountMinted: BigNumberish];
  export type OutputTuple = [reserve: string, amountMinted: bigint];
  export interface OutputObject {
    reserve: string;
    amountMinted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolLogic extends BaseContract {
  connect(runner?: ContractRunner | null): PoolLogic;
  waitForDeployment(): Promise<this>;

  interface: PoolLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "IsolationModeTotalDebtUpdated"
  ): TypedContractEvent<
    IsolationModeTotalDebtUpdatedEvent.InputTuple,
    IsolationModeTotalDebtUpdatedEvent.OutputTuple,
    IsolationModeTotalDebtUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MintedToTreasury"
  ): TypedContractEvent<
    MintedToTreasuryEvent.InputTuple,
    MintedToTreasuryEvent.OutputTuple,
    MintedToTreasuryEvent.OutputObject
  >;

  filters: {
    "IsolationModeTotalDebtUpdated(address,uint256)": TypedContractEvent<
      IsolationModeTotalDebtUpdatedEvent.InputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputObject
    >;
    IsolationModeTotalDebtUpdated: TypedContractEvent<
      IsolationModeTotalDebtUpdatedEvent.InputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputObject
    >;

    "MintedToTreasury(address,uint256)": TypedContractEvent<
      MintedToTreasuryEvent.InputTuple,
      MintedToTreasuryEvent.OutputTuple,
      MintedToTreasuryEvent.OutputObject
    >;
    MintedToTreasury: TypedContractEvent<
      MintedToTreasuryEvent.InputTuple,
      MintedToTreasuryEvent.OutputTuple,
      MintedToTreasuryEvent.OutputObject
    >;
  };
}
