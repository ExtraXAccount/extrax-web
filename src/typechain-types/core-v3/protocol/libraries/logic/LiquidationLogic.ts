/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface LiquidationLogicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOSE_FACTOR_HF_THRESHOLD"
      | "MAX_LIQUIDATION_CLOSE_FACTOR"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "IsolationModeTotalDebtUpdated"
      | "LiquidationCall"
      | "ReserveDataUpdated"
      | "ReserveUsedAsCollateralDisabled"
      | "ReserveUsedAsCollateralEnabled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOSE_FACTOR_HF_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LIQUIDATION_CLOSE_FACTOR",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CLOSE_FACTOR_HF_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LIQUIDATION_CLOSE_FACTOR",
    data: BytesLike
  ): Result;
}

export namespace IsolationModeTotalDebtUpdatedEvent {
  export type InputTuple = [asset: AddressLike, totalDebt: BigNumberish];
  export type OutputTuple = [asset: string, totalDebt: bigint];
  export interface OutputObject {
    asset: string;
    totalDebt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationCallEvent {
  export type InputTuple = [
    collateralAsset: AddressLike,
    debtAsset: AddressLike,
    user: AddressLike,
    debtToCover: BigNumberish,
    liquidatedCollateralAmount: BigNumberish,
    liquidator: AddressLike,
    receiveAToken: boolean
  ];
  export type OutputTuple = [
    collateralAsset: string,
    debtAsset: string,
    user: string,
    debtToCover: bigint,
    liquidatedCollateralAmount: bigint,
    liquidator: string,
    receiveAToken: boolean
  ];
  export interface OutputObject {
    collateralAsset: string;
    debtAsset: string;
    user: string;
    debtToCover: bigint;
    liquidatedCollateralAmount: bigint;
    liquidator: string;
    receiveAToken: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveDataUpdatedEvent {
  export type InputTuple = [
    reserve: AddressLike,
    liquidityRate: BigNumberish,
    stableBorrowRate: BigNumberish,
    variableBorrowRate: BigNumberish,
    liquidityIndex: BigNumberish,
    variableBorrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    liquidityRate: bigint,
    stableBorrowRate: bigint,
    variableBorrowRate: bigint,
    liquidityIndex: bigint,
    variableBorrowIndex: bigint
  ];
  export interface OutputObject {
    reserve: string;
    liquidityRate: bigint;
    stableBorrowRate: bigint;
    variableBorrowRate: bigint;
    liquidityIndex: bigint;
    variableBorrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUsedAsCollateralDisabledEvent {
  export type InputTuple = [reserve: AddressLike, user: AddressLike];
  export type OutputTuple = [reserve: string, user: string];
  export interface OutputObject {
    reserve: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUsedAsCollateralEnabledEvent {
  export type InputTuple = [reserve: AddressLike, user: AddressLike];
  export type OutputTuple = [reserve: string, user: string];
  export interface OutputObject {
    reserve: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidationLogic extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidationLogic;
  waitForDeployment(): Promise<this>;

  interface: LiquidationLogicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOSE_FACTOR_HF_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  MAX_LIQUIDATION_CLOSE_FACTOR: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOSE_FACTOR_HF_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_LIQUIDATION_CLOSE_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "IsolationModeTotalDebtUpdated"
  ): TypedContractEvent<
    IsolationModeTotalDebtUpdatedEvent.InputTuple,
    IsolationModeTotalDebtUpdatedEvent.OutputTuple,
    IsolationModeTotalDebtUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationCall"
  ): TypedContractEvent<
    LiquidationCallEvent.InputTuple,
    LiquidationCallEvent.OutputTuple,
    LiquidationCallEvent.OutputObject
  >;
  getEvent(
    key: "ReserveDataUpdated"
  ): TypedContractEvent<
    ReserveDataUpdatedEvent.InputTuple,
    ReserveDataUpdatedEvent.OutputTuple,
    ReserveDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralDisabled"
  ): TypedContractEvent<
    ReserveUsedAsCollateralDisabledEvent.InputTuple,
    ReserveUsedAsCollateralDisabledEvent.OutputTuple,
    ReserveUsedAsCollateralDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralEnabled"
  ): TypedContractEvent<
    ReserveUsedAsCollateralEnabledEvent.InputTuple,
    ReserveUsedAsCollateralEnabledEvent.OutputTuple,
    ReserveUsedAsCollateralEnabledEvent.OutputObject
  >;

  filters: {
    "IsolationModeTotalDebtUpdated(address,uint256)": TypedContractEvent<
      IsolationModeTotalDebtUpdatedEvent.InputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputObject
    >;
    IsolationModeTotalDebtUpdated: TypedContractEvent<
      IsolationModeTotalDebtUpdatedEvent.InputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputTuple,
      IsolationModeTotalDebtUpdatedEvent.OutputObject
    >;

    "LiquidationCall(address,address,address,uint256,uint256,address,bool)": TypedContractEvent<
      LiquidationCallEvent.InputTuple,
      LiquidationCallEvent.OutputTuple,
      LiquidationCallEvent.OutputObject
    >;
    LiquidationCall: TypedContractEvent<
      LiquidationCallEvent.InputTuple,
      LiquidationCallEvent.OutputTuple,
      LiquidationCallEvent.OutputObject
    >;

    "ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReserveDataUpdatedEvent.InputTuple,
      ReserveDataUpdatedEvent.OutputTuple,
      ReserveDataUpdatedEvent.OutputObject
    >;
    ReserveDataUpdated: TypedContractEvent<
      ReserveDataUpdatedEvent.InputTuple,
      ReserveDataUpdatedEvent.OutputTuple,
      ReserveDataUpdatedEvent.OutputObject
    >;

    "ReserveUsedAsCollateralDisabled(address,address)": TypedContractEvent<
      ReserveUsedAsCollateralDisabledEvent.InputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputObject
    >;
    ReserveUsedAsCollateralDisabled: TypedContractEvent<
      ReserveUsedAsCollateralDisabledEvent.InputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputObject
    >;

    "ReserveUsedAsCollateralEnabled(address,address)": TypedContractEvent<
      ReserveUsedAsCollateralEnabledEvent.InputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputObject
    >;
    ReserveUsedAsCollateralEnabled: TypedContractEvent<
      ReserveUsedAsCollateralEnabledEvent.InputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputObject
    >;
  };
}
