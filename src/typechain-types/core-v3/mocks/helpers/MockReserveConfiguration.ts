/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockReserveConfigurationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "configuration"
      | "getBorrowCap"
      | "getBorrowingEnabled"
      | "getCaps"
      | "getDecimals"
      | "getEModeCategory"
      | "getFlags"
      | "getFlashLoanEnabled"
      | "getFrozen"
      | "getLiquidationBonus"
      | "getLiquidationProtocolFee"
      | "getLiquidationThreshold"
      | "getLtv"
      | "getParams"
      | "getReserveFactor"
      | "getStableRateBorrowingEnabled"
      | "getSupplyCap"
      | "getUnbackedMintCap"
      | "setBorrowCap"
      | "setBorrowingEnabled"
      | "setDecimals"
      | "setEModeCategory"
      | "setFlashLoanEnabled"
      | "setFrozen"
      | "setLiquidationBonus"
      | "setLiquidationProtocolFee"
      | "setLiquidationThreshold"
      | "setLtv"
      | "setReserveFactor"
      | "setStableRateBorrowingEnabled"
      | "setSupplyCap"
      | "setUnbackedMintCap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCaps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEModeCategory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFlags", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLiquidationBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLtv", values?: undefined): string;
  encodeFunctionData(functionFragment: "getParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserveFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStableRateBorrowingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplyCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnbackedMintCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEModeCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "setFrozen", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setLiquidationBonus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLtv",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableRateBorrowingEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupplyCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnbackedMintCap",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLtv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStableRateBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnbackedMintCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEModeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLtv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStableRateBorrowingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupplyCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnbackedMintCap",
    data: BytesLike
  ): Result;
}

export interface MockReserveConfiguration extends BaseContract {
  connect(runner?: ContractRunner | null): MockReserveConfiguration;
  waitForDeployment(): Promise<this>;

  interface: MockReserveConfigurationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  configuration: TypedContractMethod<[], [bigint], "view">;

  getBorrowCap: TypedContractMethod<[], [bigint], "view">;

  getBorrowingEnabled: TypedContractMethod<[], [boolean], "view">;

  getCaps: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getDecimals: TypedContractMethod<[], [bigint], "view">;

  getEModeCategory: TypedContractMethod<[], [bigint], "view">;

  getFlags: TypedContractMethod<
    [],
    [[boolean, boolean, boolean, boolean, boolean]],
    "view"
  >;

  getFlashLoanEnabled: TypedContractMethod<[], [boolean], "view">;

  getFrozen: TypedContractMethod<[], [boolean], "view">;

  getLiquidationBonus: TypedContractMethod<[], [bigint], "view">;

  getLiquidationProtocolFee: TypedContractMethod<[], [bigint], "view">;

  getLiquidationThreshold: TypedContractMethod<[], [bigint], "view">;

  getLtv: TypedContractMethod<[], [bigint], "view">;

  getParams: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getReserveFactor: TypedContractMethod<[], [bigint], "view">;

  getStableRateBorrowingEnabled: TypedContractMethod<[], [boolean], "view">;

  getSupplyCap: TypedContractMethod<[], [bigint], "view">;

  getUnbackedMintCap: TypedContractMethod<[], [bigint], "view">;

  setBorrowCap: TypedContractMethod<
    [borrowCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBorrowingEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setDecimals: TypedContractMethod<
    [decimals: BigNumberish],
    [void],
    "nonpayable"
  >;

  setEModeCategory: TypedContractMethod<
    [categoryId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFlashLoanEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setFrozen: TypedContractMethod<[frozen: boolean], [void], "nonpayable">;

  setLiquidationBonus: TypedContractMethod<
    [bonus: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationProtocolFee: TypedContractMethod<
    [liquidationProtocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLiquidationThreshold: TypedContractMethod<
    [threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLtv: TypedContractMethod<[ltv: BigNumberish], [void], "nonpayable">;

  setReserveFactor: TypedContractMethod<
    [reserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStableRateBorrowingEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  setSupplyCap: TypedContractMethod<
    [supplyCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUnbackedMintCap: TypedContractMethod<
    [unbackedMintCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "configuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBorrowingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCaps"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEModeCategory"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFlags"
  ): TypedContractMethod<
    [],
    [[boolean, boolean, boolean, boolean, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFlashLoanEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getLiquidationBonus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLiquidationProtocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLiquidationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLtv"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getParams"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStableRateBorrowingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getSupplyCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnbackedMintCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBorrowCap"
  ): TypedContractMethod<[borrowCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBorrowingEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDecimals"
  ): TypedContractMethod<[decimals: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEModeCategory"
  ): TypedContractMethod<[categoryId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFlashLoanEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFrozen"
  ): TypedContractMethod<[frozen: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidationBonus"
  ): TypedContractMethod<[bonus: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidationProtocolFee"
  ): TypedContractMethod<
    [liquidationProtocolFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLiquidationThreshold"
  ): TypedContractMethod<[threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLtv"
  ): TypedContractMethod<[ltv: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<[reserveFactor: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStableRateBorrowingEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupplyCap"
  ): TypedContractMethod<[supplyCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUnbackedMintCap"
  ): TypedContractMethod<[unbackedMintCap: BigNumberish], [void], "nonpayable">;

  filters: {};
}
