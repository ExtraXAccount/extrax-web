/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface WadRayMathWrapperInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "halfRay"
      | "halfWad"
      | "ray"
      | "rayDiv"
      | "rayMul"
      | "rayToWad"
      | "wad"
      | "wadDiv"
      | "wadMul"
      | "wadToRay"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "halfRay", values?: undefined): string;
  encodeFunctionData(functionFragment: "halfWad", values?: undefined): string;
  encodeFunctionData(functionFragment: "ray", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rayDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rayMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rayToWad",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wad", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wadDiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wadMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wadToRay",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "halfRay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "halfWad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ray", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rayDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rayMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rayToWad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wad", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wadDiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wadMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wadToRay", data: BytesLike): Result;
}

export interface WadRayMathWrapper extends BaseContract {
  connect(runner?: ContractRunner | null): WadRayMathWrapper;
  waitForDeployment(): Promise<this>;

  interface: WadRayMathWrapperInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  halfRay: TypedContractMethod<[], [bigint], "view">;

  halfWad: TypedContractMethod<[], [bigint], "view">;

  ray: TypedContractMethod<[], [bigint], "view">;

  rayDiv: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  rayMul: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  rayToWad: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  wad: TypedContractMethod<[], [bigint], "view">;

  wadDiv: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  wadMul: TypedContractMethod<
    [a: BigNumberish, b: BigNumberish],
    [bigint],
    "view"
  >;

  wadToRay: TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "halfRay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "halfWad"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ray"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rayDiv"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rayMul"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rayToWad"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "wad"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wadDiv"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "wadMul"
  ): TypedContractMethod<[a: BigNumberish, b: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "wadToRay"
  ): TypedContractMethod<[a: BigNumberish], [bigint], "view">;

  filters: {};
}
