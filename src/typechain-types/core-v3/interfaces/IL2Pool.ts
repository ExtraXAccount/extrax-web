/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IL2PoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrow"
      | "liquidationCall"
      | "rebalanceStableBorrowRate"
      | "repay"
      | "repayWithATokens"
      | "repayWithPermit"
      | "setUserUseReserveAsCollateral"
      | "supply"
      | "supplyWithPermit"
      | "swapBorrowRateMode"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "borrow", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "repay", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "repayWithATokens",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithPermit",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "supply", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "supplyWithPermit",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayWithATokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IL2Pool extends BaseContract {
  connect(runner?: ContractRunner | null): IL2Pool;
  waitForDeployment(): Promise<this>;

  interface: IL2PoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrow: TypedContractMethod<[args: BytesLike], [void], "nonpayable">;

  liquidationCall: TypedContractMethod<
    [args1: BytesLike, args2: BytesLike],
    [void],
    "nonpayable"
  >;

  rebalanceStableBorrowRate: TypedContractMethod<
    [args: BytesLike],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<[args: BytesLike], [bigint], "nonpayable">;

  repayWithATokens: TypedContractMethod<
    [args: BytesLike],
    [bigint],
    "nonpayable"
  >;

  repayWithPermit: TypedContractMethod<
    [args: BytesLike, r: BytesLike, s: BytesLike],
    [bigint],
    "nonpayable"
  >;

  setUserUseReserveAsCollateral: TypedContractMethod<
    [args: BytesLike],
    [void],
    "nonpayable"
  >;

  supply: TypedContractMethod<[args: BytesLike], [void], "nonpayable">;

  supplyWithPermit: TypedContractMethod<
    [args: BytesLike, r: BytesLike, s: BytesLike],
    [void],
    "nonpayable"
  >;

  swapBorrowRateMode: TypedContractMethod<
    [args: BytesLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[args: BytesLike], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<[args: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidationCall"
  ): TypedContractMethod<
    [args1: BytesLike, args2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalanceStableBorrowRate"
  ): TypedContractMethod<[args: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<[args: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "repayWithATokens"
  ): TypedContractMethod<[args: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "repayWithPermit"
  ): TypedContractMethod<
    [args: BytesLike, r: BytesLike, s: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserUseReserveAsCollateral"
  ): TypedContractMethod<[args: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<[args: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supplyWithPermit"
  ): TypedContractMethod<
    [args: BytesLike, r: BytesLike, s: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapBorrowRateMode"
  ): TypedContractMethod<[args: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[args: BytesLike], [bigint], "nonpayable">;

  filters: {};
}
